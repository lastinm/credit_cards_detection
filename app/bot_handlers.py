from aiogram import Bot, F, types, Router
from aiogram.types import FSInputFile
from aiogram.filters import CommandStart, Command
import numpy as np
import imghdr       # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#import re
from pathlib import Path
import logging, os                                  

import bot_keyboards as kb
import common_utils as utils
import FasterRCNN as faster
import YOLOv12 as yolo
#from app.constants import ARTEFACTS_DIR, CLASS_NAMES
import KerasOCR as kerasocr
import EasyOCR as easyocr
import TrOCR as trocr
import PaddleOCR as paddleocr

router = Router()


async def output_detect_result(message):
    image_files = utils.get_list_of_images()

    if not image_files:
        logging.error(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏.")
        return

    sent_count = 0
    for image_file, class_name, confidence in image_files:
        try:
            if isinstance(confidence, str):
                confidence = float(confidence)
            elif not isinstance(confidence, (float, int)):
                confidence = 0.0  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if confidence>0.85:
                caption = (
                    f"üè∑ –ö–ª–∞—Å—Å: {class_name}\n"
                    f"üü¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}"
                )            
                await message.answer_photo(
                    FSInputFile(image_file),
                    caption=caption
                )
                sent_count += 1
        except Exception as e:
            logging.error(f"Error sending {image_file.name}: {e}")

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑ {len(image_files)})", reply_markup=kb.ocr)
        

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã.")   #, reply_markup=kb.main


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.message(F.photo)
async def handle_photo(message: types.Message, bot: Bot):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
        downloaded_file = await bot.download_file(file_path)
        file_bytes = downloaded_file.read()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_format = imghdr.what(None, h=file_bytes)
        if image_format not in ['jpeg', 'png']:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG")
            return

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        utils.clean_artefact_dir()
        original_filename = f"artefacts/{file_id}.{image_format}"
        with open(original_filename, "wb") as f:
            f.write(file_bytes)
    
        await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–ª–µ–π —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.", reply_markup=kb.detect)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@router.message(F.text == 'YOLOv12')
async def detect_yolo_v12(message: types.Message, bot: Bot):
    #await message.answer(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {img_path}")
    await message.answer("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...")

    try:
        utils.delete_old_detections()
        img_path = utils.get_image_from_artefacts()
        yolo.main(img_path)        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Detect error: {e}")
    
    await output_detect_result(message)


@router.message(F.text == 'Faster R-CNN')
async def detect_faster_rcnn(message: types.Message, bot: Bot):
    #await message.answer(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {img_path}")
    await message.answer("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...")
    
    try:
        utils.delete_old_detections()
        img_path = utils.get_image_from_artefacts()
        faster.main(img_path)        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Detect error: {e}")

    await output_detect_result(message)


@router.message(F.text == 'KerasOCR')
async def recognition_KerasOCR(message: types.Message, bot: Bot):
    #await message.answer(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    image_files = utils.get_list_of_images()

    if not image_files:
        logging.error(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏.")
        return

    sent_count = 0
    # try:
    for image_file, class_name, confidence in image_files:
        #logging.INFO(f"–ü–µ—Ä–µ–¥–∞–µ–º –≤ KerasOCR —Ñ–∞–π–ª: {image_file.name}.")
        try:
            full_text, predictions = kerasocr.recognize_with_confidence(image_file)
            print(f"–†–∞–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç KerasOCR: {full_text}.")
            processed_temp_path = kerasocr.get_tmp_image_file(image_file, predictions)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_photo(FSInputFile(processed_temp_path, filename="OCR processed.jpg"))
            #await message.answer(f"{full_text}", reply_markup=kb.ocr)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            #text_message = "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n" + "\n".join(texts)
            #await message.answer(text_message)
            os.unlink(processed_temp_path)

            sent_count += 1
        except Exception as e:
            logging.error(f"Error sending {image_file.name}: {e}")

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑ {len(image_files)})", reply_markup=kb.ocr)
        
    # except Exception as e:
    #     await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    #     logging.error(f"Detect error: {e}")


@router.message(F.text == 'EasyOCR')
async def recognition_EasyOCR(message: types.Message, bot: Bot):
    #await message.answer(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    image_files = utils.get_list_of_images()

    if not image_files:
        logging.error(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏.")
        return

    sent_count = 0
    # try:
    for image_file, class_name, confidence in image_files:
        #logging.INFO(f"–ü–µ—Ä–µ–¥–∞–µ–º –≤ EasyOCR —Ñ–∞–π–ª: {image_file.name}.")
        try:
            img_path, results, class_id, processed_img = easyocr.recognize_images_in_directory(image_file, languages=['en', 'ru'], gpu=False)

            print("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            orig_temp_path, processed_temp_path, recognized_texts = utils.prepare_enhanced_results(img_path, results, class_id, processed_img)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_photo(FSInputFile(orig_temp_path, filename="detected region.jpg"))
            await message.answer_photo(FSInputFile(processed_temp_path, filename="OCR processed.jpg"))
            await message.answer(f"{recognized_texts}", reply_markup=kb.ocr)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            #text_message = "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n" + "\n".join(texts)
            #await message.answer(text_message)
            os.unlink(orig_temp_path)
            os.unlink(processed_temp_path)

            sent_count += 1
        except Exception as e:
            logging.error(f"Error sending {image_file.name}: {e}")

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑ {len(image_files)})", reply_markup=kb.ocr)
        
    # except Exception as e:
    #     await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    #     logging.error(f"Detect error: {e}")


@router.message(F.text == 'TrOCR')
async def recognition_TrOCR(message: types.Message, bot: Bot):

    #await message.answer(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    image_files = utils.get_list_of_images()

    if not image_files:
        logging.error(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏.")
        return

    sent_count = 0
    # try:
    for image_file, class_name, confidence in image_files:
        #logging.INFO(f"–ü–µ—Ä–µ–¥–∞–µ–º –≤ KerasOCR —Ñ–∞–π–ª: {image_file.name}.")
        try:
            #img_path, results, class_id, processed_img = trocr.recognize_images_in_directory(image_file, languages=['en', 'ru'], gpu=False)
            outputs, processor = trocr.recognize_images_in_directory(image_file)
            full_text, confidences = trocr.get_text_with_confidence(outputs, processor)

            print("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            await message.answer(f"\'{full_text}\' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidences:.3f})")
            # orig_temp_path, processed_temp_path, recognized_texts = utils.prepare_enhanced_results(img_path, results, class_id, processed_img)

            # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # await message.answer_photo(FSInputFile(orig_temp_path, filename="detected region.jpg"))
            # await message.answer_photo(FSInputFile(processed_temp_path, filename="OCR processed.jpg"))
            # await message.answer(f"{recognized_texts}", reply_markup=kb.ocr)
            # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            # #text_message = "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n" + "\n".join(texts)
            # #await message.answer(text_message)
            # os.unlink(orig_temp_path)
            # os.unlink(processed_temp_path)

            sent_count += 1
        except Exception as e:
            logging.error(f"Error sending {image_file.name}: {e}")

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑ {len(image_files)})", reply_markup=kb.ocr)
        
    # except Exception as e:
    #     await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    #     logging.error(f"Detect error: {e}")

@router.message(F.text == 'PaddleOCR')
async def recognition_PaddleOCR(message: types.Message, bot: Bot):

    #await message.answer(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    image_files = utils.get_list_of_images()

    if not image_files:
        logging.error(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏.")
        return

    sent_count = 0
    # try:
    for image_file, class_name, confidence in image_files:
        #logging.INFO(f"–ü–µ—Ä–µ–¥–∞–µ–º –≤ KerasOCR —Ñ–∞–π–ª: {image_file.name}.")
        try:
            #img_path, results, class_id, processed_img = trocr.recognize_images_in_directory(image_file, languages=['en', 'ru'], gpu=False)
            full_text, confidences = paddleocr.recognize_images_in_directory(image_file)

            print("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            await message.answer(f"\'{full_text}\' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidences:.3f})")
            # orig_temp_path, processed_temp_path, recognized_texts = utils.prepare_enhanced_results(img_path, results, class_id, processed_img)

            # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # await message.answer_photo(FSInputFile(orig_temp_path, filename="detected region.jpg"))
            # await message.answer_photo(FSInputFile(processed_temp_path, filename="OCR processed.jpg"))
            # await message.answer(f"{recognized_texts}", reply_markup=kb.ocr)
            # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            # #text_message = "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n" + "\n".join(texts)
            # #await message.answer(text_message)
            # os.unlink(orig_temp_path)
            # os.unlink(processed_temp_path)

            sent_count += 1
        except Exception as e:
            logging.error(f"Error sending {image_file.name}: {e}")

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑ {len(image_files)})", reply_markup=kb.ocr)
        
    # except Exception as e:
    #     await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    #     logging.error(f"Detect error: {e}")


@router.message(F.text == '–°—Ä–∞–≤–Ω–∏—Ç—å OCR')
async def compare_OCR(message: types.Message, bot: Bot):
    pass

@router.message(F.text == 'TrOCR + PaddleOCR')
async def ensemble_OCR(message: types.Message, bot: Bot):
    image_files = utils.get_list_of_images()

    if not image_files:
        logging.error(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏.")
        return

    sent_count = 0
    # try:
    for image_file, class_name, confidence in image_files:
        #logging.INFO(f"–ü–µ—Ä–µ–¥–∞–µ–º –≤ KerasOCR —Ñ–∞–π–ª: {image_file.name}.")
        try:
            if class_name == 'CardNumber':
                full_text, confidences = paddleocr.recognize_images_in_directory(image_file)

                print("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                await message.answer(f"\'{full_text}\' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidences:.3f})")
            else:
                outputs, processor = trocr.recognize_images_in_directory(image_file)
                full_text, confidences = trocr.get_text_with_confidence(outputs, processor)

                print("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                await message.answer(f"\'{full_text}\' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidences:.3f})")

            sent_count += 1

        except Exception as e:
            logging.error(f"Error sending {image_file.name}: {e}")

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–∑ {len(image_files)})", reply_markup=kb.ocr)